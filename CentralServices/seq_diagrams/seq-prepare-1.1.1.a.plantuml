@startuml
' declate title
title 1.1.1.a. Prepare Handler Consume (single message)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "Prepare-Topic-dfsp1" as TOPIC_PREPARE_DFSP1
control "Prepare Event Handler" as PREP_HANDLER
collections "Position-Topic-dfsp1" as TOPIC_POSITION_DFSP1
collections "Event-Topic" as TOPIC_EVENTS
collections "Notification-Topic" as TOPIC_NOTIFICATIONS
entity "Transfer DAO" as TRANS_DAO
entity "Participant DAO" as PARTICIPANT_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_PREPARE_DFSP1
    participant PREP_HANDLER
    participant TOPIC_POSITION_DFSP1
    participant TOPIC_EVENTS
    participant TOPIC_NOTIFICATIONS
    participant TRANS_DAO
    participant PARTICIPANT_DAO
    participant DB
end box

' start flow
activate PREP_HANDLER
group Prepare Handler Consume
    TOPIC_PREPARE_DFSP1 <- PREP_HANDLER: Consume Prepare event message for Payer
    activate TOPIC_PREPARE_DFSP1
    deactivate TOPIC_PREPARE_DFSP1
    group Persist Event Information
        |||
        PREP_HANDLER -> TOPIC_EVENTS: Publish event information
        ref over PREP_HANDLER, TOPIC_EVENTS :  Event Handler Consume {9.1.0.} \n
        |||
    end

    group Validate Prepare Transfer
        group Validate Payer
            PREP_HANDLER -> PARTICIPANT_DAO: Request to retrieve Payer Participant details (if it exists)
            activate PARTICIPANT_DAO
            PARTICIPANT_DAO -> DB: Request Participant details
            hnote over DB #lightyellow
                particpant
            end note
            activate DB
            PARTICIPANT_DAO <-- DB: Return Participant details if it exists
            deactivate DB
            PARTICIPANT_DAO --> PREP_HANDLER: Return Participant details if it exists
            deactivate PARTICIPANT_DAO
            PREP_HANDLER <-> PREP_HANDLER: Validate Payer
        end
        group Validate Payee
            PREP_HANDLER -> PARTICIPANT_DAO: Request to retrieve Payee Participant details (if it exists)
            activate PARTICIPANT_DAO
            PARTICIPANT_DAO -> DB: Request Participant details
            hnote over DB #lightyellow
                particpant
            end note
            activate DB
            PARTICIPANT_DAO <-- DB: Return Participant details if it exists
            deactivate DB
            PARTICIPANT_DAO --> PREP_HANDLER: Return Participant details if it exists
            deactivate PARTICIPANT_DAO
            PREP_HANDLER <-> PREP_HANDLER: Validate Payee
        end
        group Duplicate check
            PREP_HANDLER -> TRANS_DAO: Request to retrieve Transfer (if it exists)
            activate TRANS_DAO
            TRANS_DAO -> DB: Request Transfer
            hnote over DB #lightyellow
                transfer    
            end note
            activate DB
            TRANS_DAO <-- DB: Return Transfer if it exists
            deactivate DB
            TRANS_DAO --> PREP_HANDLER: Return Transfer if it exists
            deactivate TRANS_DAO
            PREP_HANDLER <-> PREP_HANDLER: Validate duplicate Check
        end
        PREP_HANDLER <-> PREP_HANDLER: Validate amount
        PREP_HANDLER <-> PREP_HANDLER: Validate crypto-condition
        PREP_HANDLER <-> PREP_HANDLER: Validate message signature (to be confirmed in future requirement)
    end
    alt Validate Prepare Transfer (success)
        group Persist Transfer State (with transferState='RECEIVED' on validation pass)
            PREP_HANDLER -> TRANS_DAO: Request to persist transfer
            activate TRANS_DAO
            TRANS_DAO -> DB: Persist transfer
            hnote over DB #lightyellow
                transferStateChange
            end note
            activate DB
            deactivate DB
            TRANS_DAO --> PREP_HANDLER: Return success
            deactivate TRANS_DAO
        end

        note right of PREP_HANDLER #yellow
            Message:
            {
                id: <transferMessage.transferId>
                from: <transferMessage.payerFsp>,
                to: <transferMessage.payeeFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: <transferMessage>
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: position,
                        action: prepare,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
        PREP_HANDLER -> TOPIC_POSITION_DFSP1: Route & Publish Position event for Payer
        activate TOPIC_POSITION_DFSP1
        deactivate TOPIC_POSITION_DFSP1
    else Validate Prepare Transfer (failure)
        note right of PREP_HANDLER #yellow
            Message:
            {
                id: <transferMessage.transferId>
                from: <ledgerName>,
                to: <transferMessage.payerFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: {
                        "errorInformation": {
                            "errorCode": <possible codes: [3100, 3105, 3106, 3201, 3202, 3203, 3300, 3301]>
                            "errorDescription": "<refer to section 35.1.3 for description>",
                            "extensionList": <transferMessage.extensionList>
                    }
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: notification,
                        action: prepare,
                        createdAt: <timestamp>,
                        state: {
                            status: 'error',
                            code: <errorInformation.errorCode>
                            description: <errorInformation.errorDescription>
                        }
                    }
                }
            }
        end note
        PREP_HANDLER -> TOPIC_NOTIFICATIONS: Publish Notification (failure) event for Payer
        activate TOPIC_NOTIFICATIONS
        deactivate TOPIC_NOTIFICATIONS
    end
end
deactivate PREP_HANDLER
@enduml
