@startuml
' declate title
title 1.1.3.b. Transfer Handler Consume (batch messages)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "Transfer-Topic" as TOPIC_TRANSFERS
control "Transfer Event Handler" as TRANS_HANDLER
collections "Event-Topic" as TOPIC_EVENTS
collections "Notification-Topic" as TOPIC_NOTIFICATIONS
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_TRANSFERS
    participant TRANS_HANDLER
    participant TOPIC_EVENTS
    participant TOPIC_NOTIFICATIONS
    participant DB
end box

' start flow
activate TRANS_HANDLER
group Transfer Handler Consume
    TOPIC_TRANSFERS <- TRANS_HANDLER: Consume Transfer event batch of messages for Payer
    activate TOPIC_TRANSFERS
    deactivate TOPIC_TRANSFERS
    
    |||
    TRANS_HANDLER -> TOPIC_EVENTS: Publish event information
    ref over TRANS_HANDLER, TOPIC_EVENTS :  Event Handler Consume {9.1.0.} \n
    |||

    ' group Update Prepare batch Transfer State with transferState='RESERVED'
    '     TRANS_HANDLER -> TRANS_DAO: Request to update batch transfer
    '     TRANS_DAO <-> DB: Update batch transfer
    '     TRANS_DAO -> TRANS_HANDLER: Return success
    ' end

    loop for each message in batch
        note right of TRANS_HANDLER #yellow
            Message:
            {
                id: <transferMessage.transferId>
                from: <transferMessage.payerFsp>,
                to: <transferMessage.payeeFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: <transferMessage>
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: notification,
                        action: prepare,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
        TRANS_HANDLER -> TOPIC_NOTIFICATIONS: Publish Notification event for Payee
        activate TOPIC_NOTIFICATIONS
        deactivate TOPIC_NOTIFICATIONS
    end
end
deactivate TRANS_HANDLER
@enduml
