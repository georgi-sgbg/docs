@startuml
' declate title
title 2.3.2. Position Handler Consume (Timeout)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "Position-Topic-dfsp1" as TOPIC_POSITION_DFSP1
control "Position Event Handler" as POS_HANDLER
collections "Transfer-Topic" as TOPIC_TRANSFERS
collections "Event-Topic" as TOPIC_EVENT
entity "Transfer DAO" as TRANS_DAO
entity "Position DAO" as POS_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_POSITION_DFSP1
    participant TOPIC_EVENT
    participant POS_HANDLER
    participant TOPIC_TRANSFERS
    participant TRANS_DAO
    participant POS_DAO
    participant DB
end box

' start flow
activate POS_HANDLER
group Position Handler Consume (timeout)
    TOPIC_POSITION_DFSP1 <- POS_HANDLER: Consume Position event message
    activate TOPIC_POSITION_DFSP1
    deactivate TOPIC_POSITION_DFSP1

    break
        group Validate Event
            POS_HANDLER <-> POS_HANDLER: Validate event - Rule: type == 'position' && action IN ['timeout-received', 'timeout-reserved']
        end
    end

    group Persist Event Information
        POS_HANDLER -> TOPIC_EVENT: Publish event information
        ref over POS_HANDLER, TOPIC_EVENT :  Event Handler Consume {9.1.0.} 
    end
        
    group Retrieve Current Transfer Details
        POS_HANDLER -> TRANS_DAO: <color #FF0000>Request to retrieve expirationDate & transferStateId</color>
        activate TRANS_DAO
        TRANS_DAO -> DB: <color #FF0000>Fetch from database</color>
        activate DB
        deactivate DB
        hnote over DB #lightyellow
            transfer
            transferState
        end note
        POS_HANDLER <-- TRANS_DAO: <color #FF0000>Return transfer.expirationDate & transferState.transferStateId</color>
        deactivate TRANS_DAO
    end

    break
        group Validate Transfer
            POS_HANDLER <-> POS_HANDLER: <color #FF0000>Validate transfer expiration - Rule: Date.now() > expirationDate</color>
            POS_HANDLER <-> POS_HANDLER: <color #FF0000>Validate transfer state - Rule: **transferState**Id corresponds to 'RECEIVED' or 'RESERVED'</color>
        end
    end

    opt action == 'timeout-reserved'
        |||
        group Decrement Payer Position (DFSP1)
            POS_HANDLER -> POS_DAO: Request to decrement latest position for Payer
            activate POS_DAO
            POS_DAO -> DB: Persist decrement to DB
            activate DB
            deactivate DB
            hnote over DB #lightyellow
                transferPosition
            end note
            POS_DAO --> POS_HANDLER: Return success
            deactivate POS_DAO
        end
    end

    group Persist Transfer State (with transferState='ABORTED')
        POS_HANDLER -> TRANS_DAO: Request to persist transfer state
        activate TRANS_DAO
        TRANS_DAO -> DB: Persist transfer state
        activate DB
        deactivate DB
        hnote over DB #lightyellow
            transferStateChange
        end note
        TRANS_DAO --> POS_HANDLER: Return success
        deactivate TRANS_DAO
    end

    alt action == 'timeout-received'
        note right of POS_HANDLER #yellow
            Message:
            {
                id: <transferId>,
                from: <payerParticipantId>,
                to: <payeeParticipantId>,
                type: application/json,
                <color #FF0000>content: {</color>
                    <color #FF0000>headers: <transferHeaders>,</color>
                    <color #FF0000>payload: <transferMessage></color>
                <color #FF0000>},</color>
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: transfer,
                        action: timeout-received,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
    else action == 'timeout-reserved'
        note right of POS_HANDLER #yellow
            Message:
            {
                id: <transferId>,
                from: <payerParticipantId>,
                to: <payeeParticipantId>,
                type: application/json,
                <color #FF0000>content: {</color>
                    <color #FF0000>headers: <transferHeaders>,</color>
                    <color #FF0000>payload: <transferMessage></color>
                <color #FF0000>},</color>
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: transfer,
                        action: timeout-reserved,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
    end
    POS_HANDLER -> TOPIC_TRANSFERS: Publish Transfer event
    activate TOPIC_TRANSFERS
    deactivate TOPIC_TRANSFERS
end
deactivate POS_HANDLER
@enduml
