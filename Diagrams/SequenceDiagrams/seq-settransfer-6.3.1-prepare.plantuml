@startuml
' declate title
title 6.3.1. Settlement Transfer Prepare
autonumber

' declare actors
entity "Settlement DAO" as SETTLE_DAO
database "Central Store" as DB

box "Settlement Service" #lightgreen
    participant SETTLE_DAO
end box

box "Central Services" #lightyellow
    participant DB
end box

' start flow
activate SETTLE_DAO
group Settlement Transfer Prepare
    note right of SETTLE_DAO #lightgray
        **Inputs**: settlementId, transactionTimestamp, enums, trx; transferValiditySeconds (config)
    end note
    SETTLE_DAO -> DB: Retrieve list of PS_TRANSFERS_RECORDED, but not RECEIVED_PREPARE
    activate DB
    hnote over DB #lightyellow
        SELECT spc.*, pc.currencyId
        FROM **settlementParticipantCurrency** spc
        JOIN **settlementParticipantCurrencyStateChange** spcsc
        ON spcsc.settlementParticipantCurrencyId = spc.settlementParticipantCurrencyId
        AND spcsc.settlementStateId = {PS_TRANSFERS_RECORDED}
        JOIN **participantCurrency** pc
        ON pc.participantCurrencyId = spc.participantCurrencyId
        LEFT JOIN **transferDuplicateCheck** tdc
        ON tdc.transferId = spc.settlementTransferId
        WHERE spc.settlementId = {settlementId}
        AND spc.settlementTransferId IS NOT NULL
        AND tdc.transferId IS NULL

    end hnote
    DB --> SETTLE_DAO: Return **settlementTransferList**
    deactivate DB
    loop t IN settlementTransferList
        group <color #blue>DB TRANSACTION</color>
            SETTLE_DAO -> DB: Insert transferDuplicateCheck
            activate DB
            hnote over DB #lightyellow
                INSERT INTO **transferDuplicateCheck** (transferId, hash, createdDate)
                VALUES (t.settlementTransferId, hashCode(t.settlementTransferId), {transactionTimestamp})
            end hnote
            deactivate DB
            SETTLE_DAO -> DB: Insert transfer
            activate DB
            hnote over DB #lightyellow
                INSERT INTO **transfer** (transferId, amount, currencyId, 
                       ilpCondition, expirationDate, createdDate)
                VALUES (t.settlementTransferId, ABS(t.netAmount), t.currencyId,
                       0, new Date(+new Date()+1000*transferValiditySeconds), {transactionTimestamp})
            end hnote
            deactivate DB
            SETTLE_DAO -> DB: Retrieve Hub MLNS account
            activate DB
            hnote over DB #lightyellow
                SELECT pc2.participantCurrencyId AS mlnsAccountId
                FROM **participantCurrency** pc1
                JOIN **participantCurrency** pc2
                ON pc2.participantId = 1
                AND pc2.currencyId = pc1.currencyId
                AND pc2.ledgerAccountTypeId = {HUB_MULTILATERAL_SETTLEMENT}
                AND pc2.isActive = 1
                WHERE pc1.participantCurrencyId = t.participantCurrencyId
            end hnote
            DB --> SETTLE_DAO: Return **mlnsAccountId**
            deactivate DB
            alt t.netAmount < 0
                note right of SETTLE_DAO #lightgray
                    **ledgerEntryTypeId** = {SETTLEMENT_NET_RECIPIENT}
                end note
            else t.netAmount > 0
                note right of SETTLE_DAO #lightgray
                    **ledgerEntryTypeId** = {SETTLEMENT_NET_SENDER}
                end note
            else t.netAmount == 0
                note right of SETTLE_DAO #lightgray
                    **ledgerEntryTypeId** = {SETTLEMENT_NET_ZERO}
                end note
            end
            SETTLE_DAO -> DB: Insert transferParticipant records
            activate DB
            hnote over DB #lightyellow
                INSERT INTO **transferParticipant** (transferId, participantCurrencyId, 
                       transferParticipantRoleTypeId, ledgerEntryTypeId, amount, createdDate)
                VALUES (t.settlementTransferId, {mlnsAccountId},
                       {HUB}, {ledgerEntryTypeId}, t.netAmount, {transactionTimestamp})
                
                INSERT INTO **transferParticipant** (transferId, participantCurrencyId, 
                       transferParticipantRoleTypeId, ledgerEntryTypeId, amount, createdDate)
                VALUES (t.settlementTransferId, t.participantCurrencyId,
                       {DFSP_POSITION}, {ledgerEntryTypeId}, -t.netAmount, {transactionTimestamp})
            end hnote
            deactivate DB
            SETTLE_DAO -> DB: Insert transferStateChange
            activate DB
            hnote over DB #lightyellow
                INSERT INTO **transferStateChange** (transferId, transferStateId, reason, createdDate)
                VALUES (t.settlementTransferId, {RECEIVED_PREPARE}, 'Settlement transfer prepare', {transactionTimestamp})
            end hnote
            deactivate DB
            SETTLE_DAO --> SETTLE_DAO: Omit ilpPacket, participantPosition &\nparticipantPositionChange
        end
    end
end
deactivate SETTLE_DAO

@enduml
