/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 6.3.2. Settlement Transfer Commit
autonumber

' declare actors
entity "Settlement DAO" as SETTLE_DAO
database "Central Store" as DB

box "Settlement Service" #lightgreen
    participant SETTLE_DAO
end box

box "Central Services" #lightyellow
    participant DB
end box

' start flow
activate SETTLE_DAO
group Settlement Transfer Commit
    note right of SETTLE_DAO #lightgray
        **Inputs**: settlementId that holds entries with PS_TRANSFERS_COMMITTED, transactionTimestamp, enums, trx
    end note
    SETTLE_DAO -> DB: Retrieve list of PS_TRANSFERS_COMMITTED, but not COMMITTED
    activate DB
    hnote over DB #lightyellow
        SELECT tp1.transferId, tp1.ledgerEntryTypeId,
            tp1.participantCurrencyId AS dfspAccountId, tp1.amount AS dfspAmount,
            tp2.participantCurrencyId AS hubAccountId, tp2.amount AS hubAmount
        FROM **settlementParticipantCurrency** spc
        JOIN **settlementParticipantCurrencyStateChange** spcsc
        ON spcsc.settlementParticipantCurrencyId = spc.settlementParticipantCurrencyId
        AND spcsc.settlementStateId = {PS_TRANSFERS_COMMITTED}
        JOIN **transferStateChange** tsc1
        ON tsc1.transferId = spc.settlementTransferId
        AND tsc1.transferStateId = {RESERVED}
        LEFT JOIN **transferStateChange** tsc2
        ON tsc2.transferId = spc.settlementTransferId
        AND tsc2.transferStateId = {COMMITTED}
        JOIN **transferParticipant** tp1
        ON tp1.transferId = spc.settlementTransferId
        AND tp1.transferParticipantRoleTypeId = {DFSP_POSITION}
        JOIN **transferParticipant** tp2
        ON tp2.transferId = spc.settlementTransferId
        AND tp2.transferParticipantRoleTypeId = {HUB}
        WHERE spc.settlementId = {settlementId}
        AND tsc2.transferId IS NULL
    end hnote
    DB --> SETTLE_DAO: Return **settlementTransferList**
    deactivate DB
    group <color #blue>DB TRANSACTION</color>
        loop t IN settlementTransferList
            SETTLE_DAO -> DB: Persist transfer fulfilment
            hnote over DB #lightyellow
                INSERT INTO **transferFulfilment** (transferFulfilmentId, transferId,
                    ilpFulfilment, completedDate, isValid, settlementWindowId, createdDate)
                VALUES (Uuid(), t.transferId, 0, tTimestamp, 1, NULL, tTimestamp)
            end note
            activate DB
            deactivate DB

            SETTLE_DAO -> DB: Persist RECEIVED_FULFIL state
            activate DB
            deactivate DB
            hnote over DB #lightyellow
                INSERT INTO **transferStateChange** (transferId, transferStateId, reason)
                VALUES (t.transferId, {RECEIVED_FULFIL}, 'Settlement transfer commit initiated')
            end note

            SETTLE_DAO -> DB: Persist transfer state
            activate DB
            hnote over DB #lightyellow
                INSERT INTO **transferStateChange** (transferId, transferStateId, reason)
                VALUES (t.transferId, {COMMITTED}, 'Settlement transfer commit')
            end note
            DB --> SETTLE_DAO: Return **transferStateChangeId**
            deactivate DB

            opt t.ledgerEntryTypeId == {SETTLEMENT_NET_SENDER}
                SETTLE_DAO -> DB: Select dfsp position FOR UPDATE
                activate DB
                hnote over DB #lightyellow
                    SELECT participantPositionId AS dfspPositionId,
                        value AS dfspPositionValue,
                        reservedValue AS dfspReservedValue
                    FROM **participantPosition**
                    WHERE participantCurrencyId = t.dfspAccountId
                    FOR UPDATE
                end note
                DB --> SETTLE_DAO: Return **dfspPositionId**, **dfspPositionValue** and **dfspReservedValue**
                deactivate DB

                SETTLE_DAO->DB: Persist latest dfsp position & dfsp position change
                hnote over DB #lightyellow
                    UPDATE **participantPosition**
                    SET value = {dfspPositionValue + t.dfspAmount}
                    WHERE participantPositionId = {dfspPositionId}

                    INSERT INTO **participantPositionChange**
                        (participantPositionId, transferStateChangeId, value, reservedValue)
                    VALUES ({dfspPositionId}, {transferStateChangeId},
                        {dfspPositionValue + t.dfspAmount}, {dfspReservedValue})
                end note
                activate DB
                deactivate DB

                SETTLE_DAO -> DB: Select hub position FOR UPDATE
                activate DB
                hnote over DB #lightyellow
                    SELECT participantPositionId AS hubPositionId,
                        value AS hubPositionValue
                    FROM **participantPosition**
                    WHERE participantCurrencyId = t.hubAccountId
                    FOR UPDATE
                end note
                DB --> SETTLE_DAO: Return **hubPositionId** and **hubPositionValue**
                deactivate DB

                SETTLE_DAO->DB: Persist latest hub position & hub position change
                hnote over DB #lightyellow
                    UPDATE **participantPosition**
                    SET value = {hubPositionValue + t.hubAmount}
                    WHERE participantPositionId = {hubPositionId}

                    INSERT INTO **participantPositionChange**
                        (participantPositionId, transferStateChangeId,
                        value, reservedValue)
                    VALUES ({hubPositionId}, {transferStateChangeId},
                        {hubPositionValue + t.hubAmount}, 0)
                end note
                activate DB
                deactivate DB
            end
        end
    end
end
deactivate SETTLE_DAO

@enduml
